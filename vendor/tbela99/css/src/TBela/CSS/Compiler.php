<?php

namespace TBela\CSS;

use Exception;
use TBela\CSS\Interfaces\ElementInterface;

/**
 * Css Compiler. Use Parser or Renderer
 * @package TBela\CSS
 * @deprecated deprecated since 0.2.0
 */
class Compiler {

    /**
     *
     * @var array|string[]
     * @ignore
     */
    protected $properties = [];

    /**
     * @var ElementInterface
     * @ignore
     */
    protected $data;

    /**
     * @var Renderer
     */
    protected $renderer;

    /**
     * Compiler constructor.
     * @param array $options
     */
    public function __construct (array $options = []) {

        $this->renderer = new Renderer($options);
    }

    /**
     * set compiler options
     * @param array $options
     * @return $this
     */
    public function setOptions (array $options) {

        $this->renderer->setOptions($options);

        return $this;
    }

    public function getOptions() {

        return $this->renderer->getOptions();
    }

    /**
     * set css content
     * @param string $css
     * @param array $options
     * @return Compiler
     * @throws Parser\SyntaxError
     */
    public function setContent ($css, array $options = []) {

        $this->data = (new Parser($css, $options))->parse();
        return $this;
    }

    /**
     * load css content from a file
     * @param string $file
     * @param string $media
     * @param array $options
     * @return $this
     * @throws Parser\SyntaxError
     */
    public function load ($file, array $options = [], $media = '') {

        $this->data = (new Parser('', $options))->load($file, $media)->parse();
        return $this;
    }

    /**
     * load content from an element or AST
     * @param ElementInterface|object $ast
     * @return Compiler
     */
    public function setData ($ast) {

        $this->data = $ast instanceof ElementInterface ? $ast : Element::getInstance($ast);
        return $this;
    }

    /**
     * return the element generated by the css parser
     * @return ElementInterface
     */
    public function getData () {

        return $this->data;
    }

    /**
     * compile css
     * @return string
     * @throws Exception
     */
    public function compile () {

        if (isset($this->data)) {

            return $this->renderer->render($this->data);
        }

        return '';
    }
}