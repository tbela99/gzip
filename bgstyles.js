/* do not edit this file! */
// @ts-check
/**
 * lazy image loader
 * @package     GZip Plugin
 * @copyright   Copyright (C) 2005 - 2018 Thierry Bela.
 *
 * dual licensed
 *
 * @license     LGPL v3
 * @license     MIT License
 */
// load responsive css background images
LIB.ready((function(e) {
    // dynamic inline background images
    // or Array.from()
    const t = [].slice.apply(document.querySelectorAll("[data-bg-style]"));
    // responsive css background-image in [style] attribute
        if (t.length > 0) {
        // or use resizeObserver
        const o = t.map((function(e) {
            return JSON.parse(e.dataset.bgStyle);
        }));
        let c = [];
        function n() {
            let n, i, a, r, u, l = c.length;
            for (l = t.length; l--; ) {
                for (i = t[l], a = Object.keys(o[l]).map(e => +e).sort((e, t) => t - e), u = e, 
                r = 0; r < a.length && (u = window.matchMedia("(min-width: " + a[r] + "px)"), !u.matches); r++) ;
                if (u == e || !u.matches || r == a.length) continue;
                if (n = "url(" + o[l][a[r]] + ")", i.style.backgroundImage == n) continue;
                let c = new Image, s = function(e) {
                    return function() {
                        i.style.backgroundImage = e;
                    };
                }(n);
                c.src = o[l][a[r]], c.width > 0 && c.height > 0 ? s() : "decode" in c ? c.decode().then(s) : c.onload = s;
            }
        }
        Object.values(o).forEach((function(e) {
            Object.keys(e).forEach((function(e) {
                e = +e, -1 == c.indexOf(e) && c.push(e);
            }));
        })), c.sort((function(e, t) {
            return t - e;
        })), window.addEventListener("resize", n, !1), setTimeout(n, 25);
    }
}));